ggplot(data = cpm.melt, aes(x = Species, y = 2^value/10000, col = Species)) +
geom_jitter(cex = 1.5, alpha = 0.5, width = 0.2, key_glyph = rectangle_key_glyph(fill = color)) +
stat_summary(fun.ymin=median, fun.ymax=median, fun.y=median, geom="crossbar") +
scale_y_continuous(trans = "log10", labels = comma) +
facet_grid(. ~variable, ) +
ylab("RA (%)") + scale_color_manual(values = wes_palette(n=3, name="Moonrise2")) +
theme(axis.text.x = element_blank()) +
theme(legend.position = "bottom", legend.title = element_text("Host Species"))
dev.off()
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/spec_OTU_diff_abundance_soil_capsella.pdf",  width = 7, height = 3.5,
useDingbats = FALSE, font = "ArialMT")
ggplot(data = cpm.melt, aes(x = Species, y = 2^value/10000, col = Species)) +
geom_jitter(cex = 1.5, alpha = 0.5, width = 0.2) +
stat_summary(fun.ymin=median, fun.ymax=median, fun.y=median, geom="crossbar") +
scale_y_continuous(trans = "log10", labels = comma) +
facet_grid(. ~variable, ) +
ylab("RA (%)") + scale_color_manual(values = wes_palette(n=3, name="Moonrise2")) +
theme(axis.text.x = element_blank()) +
theme(legend.position = "bottom", legend.title = element_text("Host Species"))
dev.off()
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/spec_OTU_diff_abundance_soil_capsella.pdf",  width = 7, height = 3.5,
useDingbats = FALSE, font = "ArialMT")
ggplot(data = cpm.melt, aes(x = Species, y = 2^value/10000, col = Species)) +
geom_jitter(cex = 1.5, alpha = 0.5, width = 0.2) +
stat_summary(fun.ymin=median, fun.ymax=median, fun.y=median, geom="crossbar") +
scale_y_continuous(trans = "log10", labels = comma) +
facet_grid(. ~variable, ) +
ylab("RA (%)") + scale_color_manual(values = wes_palette(n=3, name="Moonrise2")) +
theme(axis.text.x = element_blank()) +
theme(legend.position = "bottom")
dev.off()
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/spec_OTU_diff_abundance_soil_capsella.pdf",  width = 7, height = 3.5,
useDingbats = FALSE, font = "ArialMT")
ggplot(data = cpm.melt, aes(x = Species, y = 2^value/10000, col = Species)) +
geom_jitter(cex = 1.5, alpha = 0.5, width = 0.2, key_glyph = rectangle_key_glyph(fill = color)) +
stat_summary(fun.ymin=median, fun.ymax=median, fun.y=median, geom="crossbar") +
scale_y_continuous(trans = "log10", labels = comma) +
facet_grid(. ~variable, ) +
ylab("RA (%)") + scale_color_manual(values = wes_palette(n=3, name="Moonrise2")) +
theme(axis.text.x = element_blank()) +
theme(legend.position = "bottom")
dev.off()
plot_grid(diff_soil_non_soil + ylab("logFC(Plant/Soil)") +
theme(legend.position = "NULL"),
diff_cap_ath + ylab("logFC(A. thaliana/Other Brassicaceae)") +
theme(legend.position = "NULL"), legend, rel_heights = c(1,1,.1), nrow = 3)
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/diff_abundance_soil_capsella.pdf", height = 12, width = 15,
useDingbats = FALSE, font = "ArialMT")
plot_grid(diff_soil_non_soil + ylab("logFC(Plant/Soil)") +
theme(legend.position = "NULL"),
diff_cap_ath + ylab("logFC(A. thaliana/Other Brassicaceae)") +
theme(legend.position = "NULL"), legend, rel_heights = c(1,1,.1), nrow = 3)
dev.off()
sigtabgen
sigtabgen$sig <- sigtabgen$FDR<0.01
Perform infections and sequence
sigtabgen$sig
sigtabgen$sig[sigtabgen$sig==TRUE]= 1
sigtabgen$sig[sigtabgen$sig==FALSE] = 0.25
diff_cap_ath <- ggplot(sigtabgen, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, alpha = sig) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() + theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
diff_cap_ath <- ggplot(sigtabgen, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig)) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() + theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
diff_cap_ath
ggplot(sigtabgen, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig)) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() + theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
sigtabgen_soil$sig <- sigtabgen$FDR<0.01
ggplot(sigtabgen_soil, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig))  +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() +
theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
sigtabgen_soil$sig[sigtabgen_soi$sig==TRUE]= 1
sigtabgen_soil$sig[sigtabgen_soi$sig==FALSE] = 0.25
sigtabgen_soil$sig <- sigtabgen_soil$FDR<0.01
sigtabgen_soil$sig[sigtabgen_soi$sig==TRUE]= 1
sigtabgen_soil$sig[sigtabgen_soi$sig==FALSE] = 0.25
sigtabgen_soil$sig <- sigtabgen_soil$FDR<0.01
sigtabgen_soil$sig[sigtabgen_soil$sig==TRUE]= 1
sigtabgen_soil$sig[sigtabgen_soil$sig==FALSE] = 0.25
#sigtabgen_soil <- sigtabgen_soi %>% filter(FDR<=0.01)
diff_soil_non_soil <-
ggplot(sigtabgen_soil, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig))  +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() +
theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
ggplot(sigtabgen_soil, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig))  +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() +
theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
#sigtabgen_soil <- sigtabgen_soi %>% filter(FDR<=0.01)
diff_soil_non_soil <-
ggplot(sigtabgen_soil, aes(x = Genus, y = logFC, color = Phylum)) + geom_point(size=3, aes(alpha = sig))  +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5)) + scale_color_viridis_d() +
theme(legend.position="bottom") +
geom_hline(yintercept=0, linetype="dashed", color = "red")
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/diff_abundance_soil_capsella.pdf", height = 12, width = 15,
useDingbats = FALSE, font = "ArialMT")
plot_grid(diff_soil_non_soil + ylab("logFC(Plant/Soil)") +
theme(legend.position = "NULL"),
diff_cap_ath + ylab("logFC(A. thaliana/Other Brassicaceae)") +
theme(legend.position = "NULL"), legend, rel_heights = c(1,1,.1), nrow = 3)
dev.off()
###################################################
# Relationship between OTUS and Latitude and Longitude
###################################################
#correlate every OTU with Latitude
y = data.frame(plant_clim$otu_table)
load("/ebio/abt6_projects9/pathodopsis_microbiomes/data/OTU_clim.rds")
plant_val = which(OTU_clim$clim_data$Host_Species=="Ath")
plant_clim <- list(otu_table = OTU_clim$otu_table[plant_val,],
clim_data = OTU_clim$clim_data[plant_val,],
tax_table = OTU_clim$tax_table,
phy_tree = OTU_clim$phy_tree,
refseq = OTU_clim$refseq)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu$Longitude = plant_otu$Latitude + runif(length(plant_otu$Latitude), 0, 0.0001)
###################################################
# Relationship between OTUS and Latitude and Longitude
###################################################
#correlate every OTU with Latitude
y = data.frame(plant_clim$otu_table)
plant_clim$clim_data$Lat <- as.numeric(as.character(plant_clim$clim_data$Lat))
plant_clim$clim_data$Long <- as.numeric(as.character(plant_clim$clim_data$Long))
hm = apply(y, 2, function(col1) cor.test(col1, plant_clim$clim_data$Lat, na.rm =TRUE)[c("p.value", "estimate")])
hm.long = apply(y, 2, function(col1) cor.test(col1, plant_clim$clim_data$Long, na.rm =TRUE)[c("p.value", "estimate")])
cor.hm <- matrix(unlist(hm), ncol = 2, byrow = TRUE)
cor.hm.long <- matrix(unlist(hm.long), ncol = 2, byrow = TRUE)
colnames(cor.hm) <- c("pval.lat", "cor.lat")
colnames(cor.hm.long) <- c("pval.long", "cor.long")
info_range_orig<- cbind(info_range_orig, cor.hm)
info_range_orig<- cbind(info_range_orig, cor.hm.long)
load("/ebio/abt6_projects9/pathodopsis_microbiomes/data/OTU_clim.rds")
plant_val = which(OTU_clim$clim_data$Host_Species=="Ath")
plant_clim <- list(otu_table = OTU_clim$otu_table[plant_val,],
clim_data = OTU_clim$clim_data[plant_val,],
tax_table = OTU_clim$tax_table,
phy_tree = OTU_clim$phy_tree,
refseq = OTU_clim$refseq)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu$Longitude = plant_otu$Latitude + runif(length(plant_otu$Latitude), 0, 0.0001)
# no trend:
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
sp::coordinates(plant_otu) = ~Longitude+Latitude
proj4string(plant_otu) = CRS(my.transform)
#proj4string(plant_otu) = CRS("+init=epsg:28992")
opti_var <- names(plant_otu)
library(vegan)
library(SNPRelate)
library(gdsfmt)
library(microbiome)
library(phyloseq)
library(ade4)
devtools::install_git(url = 'https://github.com/tkarasov/taliaRgeneral.git')
library(taliaRgeneral)
#library(genefilter)
library(limma)
library(edgeR)
library(sp)
load("/ebio/abt6_projects9/pathodopsis_microbiomes/data/OTU_clim.rds")
plant_val = which(OTU_clim$clim_data$Host_Species=="Ath")
plant_clim <- list(otu_table = OTU_clim$otu_table[plant_val,],
clim_data = OTU_clim$clim_data[plant_val,],
tax_table = OTU_clim$tax_table,
phy_tree = OTU_clim$phy_tree,
refseq = OTU_clim$refseq)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu$Longitude = plant_otu$Latitude + runif(length(plant_otu$Latitude), 0, 0.0001)
# no trend:
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
sp::coordinates(plant_otu) = ~Longitude+Latitude
proj4string(plant_otu) = CRS(my.transform)
#proj4string(plant_otu) = CRS("+init=epsg:28992")
opti_var <- names(plant_otu)
opti_var
# no trend:
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
sp::coordinates(plant_otu) = ~Longitude+Latitude
plant_otu$Latitude
plant_otu$Longitude
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
library(tidyr)
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
plant_otu$Latitude
plant_otu <- plant_otu %>% select(is.na(Latitude)==FALSE)
library(dplyr)
plant_otu <- plant_otu %>% select(is.na(Latitude)==FALSE)
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu$Longitude = plant_otu$Latitude + runif(length(plant_otu$Latitude), 0, 0.0001)
# no trend:
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
sp::coordinates(plant_otu) = ~Longitude+Latitude
proj4string(plant_otu) = CRS(my.transform)
opti_var <- names(plant_otu)
my.sph<- vector('list', length(opti_var))
my.lin<- vector('list', length(opti_var))
my.range <- lapply(lapply(my.lin, `[[`, 3), '[[', 2)
my.slope <- as.numeric(lapply(lapply(my.lin, `[[`, 2), '[[', 2))
###################################################
# Calculate Decay rate
###################################################
my.nugget <- lapply(my.lin, `[[`, 2)
my.range <- lapply(lapply(my.lin, `[[`, 3), '[[', 2)
my.slope <- as.numeric(lapply(lapply(my.lin, `[[`, 2), '[[', 2))
my.lin
opti_var
my.lin<- vector('list', length(opti_var))
my.lin
################
# Look at variograms over 1000km
################
for(i in 1:dim(plant_clim$otu_table)[2]){
my.label <- paste(plant_clim$tax_table[i], opti_var[i], sep = ",")[6]
eq <- as.formula(paste(paste("log10(",opti_var[i],sep=""), "+0.01)~1", sep=""))
v = variogram(eq, plant_otu, cutoff = 1000, width = 8)
v.fit.lin = fit.variogram(v, vgm("Lin"))
vgl = variogramLine(v.fit.lin, maxdist = 1000)
v.plot = ggplot(v, aes(x = dist, y = gamma)) +
geom_point(alpha = 0.3, cex = 2) +
geom_line(data = vgl, col = "RED") +
xlab("") +
ylab("") +
#ylim(c(0,3)) +
labs(title = my.label, size = 4) +
#annotate("Text", y = max(v$gamma), x =max(v$dist), label = my.label, hjust=1, size = 6 ) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
assign(paste("plot", i, sep=""), v.plot)
# v.fit.exp = fit.variogram(v, vgm(1, "exp"))
my.sph[[i]] = v.fit.sph
my.lin[[i]] = v.fit.lin
# my.exp[[i]] = v.fit.exp
}
library(gstat)
plant_clim <- list(otu_table = OTU_clim$otu_table[plant_val,],
clim_data = OTU_clim$clim_data[plant_val,],
tax_table = OTU_clim$tax_table,
phy_tree = OTU_clim$phy_tree,
refseq = OTU_clim$refseq)
plant_otu = data.frame(plant_clim$otu_table)
plant_otu$Latitude = as.numeric(as.character(plant_clim$clim_data$Lat))
plant_otu$Longitude = as.numeric(as.character(plant_clim$clim_data$Long))
plant_otu <- plant_otu %>% filter(is.na(Latitude)==FALSE)
set.seed(4)
plant_otu$Longitude = plant_otu$Latitude + runif(length(plant_otu$Latitude), 0, 0.0001)
# no trend:
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
sp::coordinates(plant_otu) = ~Longitude+Latitude
proj4string(plant_otu) = CRS(my.transform)
opti_var <- names(plant_otu)
my.sph<- vector('list', length(opti_var))
my.lin<- vector('list', length(opti_var))
################
# Look at variograms over 1000km
################
for(i in 1:dim(plant_clim$otu_table)[2]){
my.label <- paste(plant_clim$tax_table[i], opti_var[i], sep = ",")[6]
eq <- as.formula(paste(paste("log10(",opti_var[i],sep=""), "+0.01)~1", sep=""))
v = variogram(eq, plant_otu, cutoff = 1000, width = 8)
v.fit.lin = fit.variogram(v, vgm("Lin"))
vgl = variogramLine(v.fit.lin, maxdist = 1000)
v.plot = ggplot(v, aes(x = dist, y = gamma)) +
geom_point(alpha = 0.3, cex = 2) +
geom_line(data = vgl, col = "RED") +
xlab("") +
ylab("") +
#ylim(c(0,3)) +
labs(title = my.label, size = 4) +
#annotate("Text", y = max(v$gamma), x =max(v$dist), label = my.label, hjust=1, size = 6 ) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
assign(paste("plot", i, sep=""), v.plot)
# v.fit.exp = fit.variogram(v, vgm(1, "exp"))
my.sph[[i]] = v.fit.sph
my.lin[[i]] = v.fit.lin
# my.exp[[i]] = v.fit.exp
}
my.sph<- vector('list', length(opti_var))
my.lin<- vector('list', length(opti_var))
################
# Look at variograms over 1000km
################
for(i in 1:dim(plant_clim$otu_table)[2]){
my.label <- paste(plant_clim$tax_table[i], opti_var[i], sep = ",")[6]
eq <- as.formula(paste(paste("log10(",opti_var[i],sep=""), "+0.01)~1", sep=""))
v = variogram(eq, plant_otu, cutoff = 1000, width = 8)
v.fit.lin = fit.variogram(v, vgm("Lin"))
vgl = variogramLine(v.fit.lin, maxdist = 1000)
v.plot = ggplot(v, aes(x = dist, y = gamma)) +
geom_point(alpha = 0.3, cex = 2) +
geom_line(data = vgl, col = "RED") +
xlab("") +
ylab("") +
#ylim(c(0,3)) +
labs(title = my.label, size = 4) +
#annotate("Text", y = max(v$gamma), x =max(v$dist), label = my.label, hjust=1, size = 6 ) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
assign(paste("plot", i, sep=""), v.plot)
# v.fit.exp = fit.variogram(v, vgm(1, "exp"))
#  my.sph[[i]] = v.fit.sph
my.lin[[i]] = v.fit.lin
# my.exp[[i]] = v.fit.exp
}
names(my.lin) = opti_var
short <- plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, nrow = 4, label_x ="Distance (km)", label_y = "Semivariance")
short
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv")
head(total)
dim(total)
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = "\t")
dim(total)
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = "/t")
total = rread.table("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = "\t")
total = read.table("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = "\t")
dim(total)
total = read.table("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ")
total = read.table("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ", row.names = FALSE)
total = read.table("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ")
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ")
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ", row.names = NULL)
head(total)
ggplot(data = total, aes(x = position, y = actual_strain)) + geom_point()
total %>% mutate(position = fct_reorder(position, actual_strain, .fun = 'median'))
library(forcats)
total %>% mutate(position = fct_reorder(position, actual_strain, .fun = 'median'))
total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE))
order(total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)))
total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE) %>% arrange(Mean)
total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean, decreasing = FALSE)
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
total_reorder
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)[,1]
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
total_reorder <- total_reorder[,1]
total = total[sort(order(total)[total_reorder)]
total = total[sort(order(total)[total_reorder]
total = total[sort(order(total)[total_reorder]]
total = total[sort(order(total)[total_reorder]]
total = total[sort(order(total)[total_reorder])]
total
total_reorder
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
tail(total_reorder)
#total_reorder <- total_reorder[,1]
total_reorder$position <- as.factor(total_reorder$position)
#total_reorder <- total_reorder[,1]
total$position <- as.factor(total$position)
levels(total$position) <- total_reorder$position
ggplot(data = total, aes(x = position, y = actual_strain)) +
geom_point()
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ", row.names = NULL)
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
#total_reorder <- total_reorder[,1]
total$position <- as.factor(total$position)
levels(total$position) <- levels(total_reorder$position)
ggplot(data = total, aes(x = position, y = actual_strain)) +
geom_point()
levels(total_reorder$position)
#total_reorder <- total_reorder[,1]
total_reorder$position <- as.factor(total_reorder$position)
levels(total$position) <- levels(total_reorder$position)
ggplot(data = total, aes(x = position, y = actual_strain)) +
geom_point()
total_reorder
total_reorder[90:96,]
total_reorder[90:97,]
levels(total$position) <- levels(total_reorder$position) %>% select(position %in% total_reorder[90:97,]$position)
total %>% select(position %in% total_reorder[90:97,]$position)
total
total = read.csv("/ebio/abt6_projects8/Pseudomonas_mapping/data/infection_experiments/june_2018_day7/image_analysis/my_file.csv", sep = " ", row.names = NULL)
total_reorder <- total %>% group_by(position) %>% dplyr::summarise(Mean = mean(actual_strain, na.rm =TRUE)) %>% arrange(Mean)
total %>% select(position %in% total_reorder[90:97,]$position)
library(tidyr)
class(total)
total %>% select(position %in% total_reorder[90:97,]$position)
total$position
total %>% filter(position %in% total_reorder[90:97,]$position)
total <- total %>% filter(position %in% total_reorder[90:97,]$position)
ggplot(data = total, aes(x = position, y = actual_strain)) +
geom_point()
library(dplyr)
R.version()
R.Version()
OTU_clim
OTU_clim$clim_data
dim(OTU_clim$otu_table)
GP_at15_all
# #################################
# # Step 1: Read in metadata Feb. 2020
# #################################
load("/ebio/abt6_projects9/pathodopsis_microbiomes/data/OTU_clim.rds")
plant_val = which(OTU_clim$clim_data$Host_Species=="Ath")
plant_clim <- list(otu_table = OTU_clim$otu_table[plant_val,],
clim_data = OTU_clim$clim_data[plant_val,],
tax_table = OTU_clim$tax_table,
phy_tree = OTU_clim$phy_tree,
refseq = OTU_clim$refseq)
plant_clim
my.responseorig <- data.frame(sqrt(plant_clim$otu_table+1))
my.responseorig <- data.frame(sqrt(plant_clim$otu_table+1)) %>% dist() %>% cmdscale()
#colnames(my.response) <- "otu"
colnames(my.responseorig) = c("MDS1", "MDS2")
col1 = as.factor(sample_data(only_ath)$TourID)
col1 = as.factor(plant_clim$TourID)
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
my.responseorig
col1 = as.factor(plant_clim$TourID)
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
my.responseorig <- data.frame(sqrt(plant_clim$otu_table+1)) %>% dist() %>% cmdscale() %>% data.frame()
#colnames(my.response) <- "otu"
colnames(my.responseorig) = c("MDS1", "MDS2")
col1 = as.factor(plant_clim$TourID)
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
col1
plant_clim$clim_data$Tour_ID
col1 = as.factor(plant_clim$clim_data$TourID)
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
col1
col1 = as.factor(plant_clim$clim_data$TourID)
col1
plant_clim$clim_data$TourID
plant_clim$clim_data$Tour_ID
col1 = plant_clim$clim_data$TourID
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
col1
col1 = plant_clim$clim_data$TourID
col1 = plant_clim$clim_data$Tour_ID
ggplot(data = my.responseorig, aes(x=MDS1, y=MDS2)) +
geom_point(aes(color = col1), cex = 3) +
scale_color_viridis_d() +
theme_bw()
my.responseorig <- data.frame(sqrt(plant_clim$otu_table+1)) %>% dist() %>% cmdscale(eig = T) %>% data.frame()
data.frame(sqrt(plant_clim$otu_table+1)) %>% dist() %>% cmdscale(eig = T)
my.responseorig <- data.frame(sqrt(plant_clim$otu_table+1)) %>% dist() %>% cmdscale(eig = F) %>% data.frame()
#################################
# Set response variable as MDS1
#################################
my.response1 <- my.responseorig$X1 #my.responseorig[,1][match(data_frame_predictors$Sequence_ID, rownames(my.responseorig))]
#my.response1 <- my.response[match(data_frame_predictors$Sequence_ID, rownames(my.response))]
#data_frame_predictors <- sample_data(GP_at15_all) %>% select (-c(PlantID, Subject))
my.total.matrix <- cbind(plant_clim$clim_data, response = my.response1)#cbind(data_frame_predictors, "otu" = my.response1)
head(my.total.matrix)
my.plantID <- my.total.matrix %>% select(c(PDSI, Tour_ID, Plant_ID))
rownames(my.plantID) <-my.total.matrix$Plant_ID
my.total.matrix <- filter(my.total.matrix, is.na(otu) == FALSE) %>% select (-c(Plant_ID, Sequence_ID, Site_ID))
my.total.matrix <- filter(my.total.matrix, is.na(response) == FALSE) %>% select (-c(Plant_ID, Sequence_ID, Site_ID))
# calculate correlation matrix. Only possible with numeric predictors
nums <- unlist(lapply(plant_clim$clim_data, is.numeric))
correlationMatrix <- cor(data_frame_predictors[,nums], use = "pairwise.complete.obs")
correlationMatrix <- cor(plant_clim$clim_data[,nums], use = "pairwise.complete.obs")
heatmap.2(correlationMatrix, scale = "none", density.info="none", trace="none")
library(heatmap.2)
library(gplots)
heatmap.2(correlationMatrix, scale = "none", density.info="none", trace="none")
correlationMatrix
image(correlationMatrix)
OTU_clim$clim_data
colnames(OTU_clim$clim_data)
OTU_clim$clim_data$X.1
OTU_clim$clim_data$X
heatmap.2(correlationMatrix, scale = "none", density.info="none", trace="none")
correlationMatrix
sum(is.infinite(correlationMatrix))
#remove samples for which missing more than 20 predictors
all_metadata<- all_metadata[-which(apply(all_metadata, 1, function(x) sum(is.na(x)))>20),]
metadata = read.table("/ebio/abt6_projects9/pathodopsis_microbiomes/pathodopsis_git/data/all_metagenome_metadata_2_2020_reads.tsv", header=T, fill =TRUE, sep = "\t") #%>% select(-c(X, X.1, X.2))
#choose only A. thaliana
all_metadata = metadata #filter(metadata, Host_Species == "Ath")
metadata_old
