theme(legend.position = "none")
vg
#First add some wiggle to the OTU5 points then reproject the points
OTU5_tab$Longitude = OTU5_tab$Longitude + runif(n=length(OTU5_tab$Longitude), min=0, max=0.000001)
OTU5_tab = read.table(paste(path, "/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/all_runs/demult_python/OTU5_RA_table.txt", sep =""),
sep="\t",
header = T )
OTU5_tab$OTU5 = as.numeric(as.character(OTU5_tab$OTU5))
#First add some wiggle to the OTU5 points then reproject the points
OTU5_tab$Longitude = OTU5_tab$Longitude + runif(n=length(OTU5_tab$Longitude), min=0, max=0.000001)
OTU5_tab$Latitude = OTU5_tab$Latitude + runif(n=length(OTU5_tab$Latitude), min=0, max=0.000001)
#Now make sure everything has the same projection
coordinates(OTU5_tab) = c("Longitude", "Latitude")
proj4string(OTU5_tab) = CRS(my.transform)
my.sf = st_as_sf(x = OTU5_tab, coords = c("Longitude", "Latitude"), crs = my.transform)
my.sp = as_Spatial(my.sf)
my.sp = spTransform(my.sp, CRS(my.transform))
my.df = data.frame(my.sp)
# subset world map. Still need to remove canary islands and northern part of Norway
europe = world[world$continent == "Europe" | world$continent == "Asia" ,]
europe = as_Spatial(europe, )
crs(europe) = my.transform
europe.sf = st_as_sf(europe)
#I need to create a grid of points I would like to predict the values for.
lon <- seq(extent(my.sp)[1] - 5, extent(my.sp)[2] + 5, length.out = 500)
lat <- seq(extent(my.sp)[3] -5, extent(my.sp)[4] + 5, length.out = 500)
grd <- expand.grid(lon = lon, lat = lat)
grd_sf  <-  st_as_sf(grd, coords = c("lon", "lat"), crs = my.transform, agr = "constant")
grd_sp <- as_Spatial(grd_sf)
crs(grd_sp) = my.transform
#automap seems a little faster
sp.laea <- spTransform(my.sp, CRS(laea))
europe.laea <-spTransform(europe, CRS(laea))
grd.laea <- spTransform(grd_sp, CRS(laea))
kriging_result = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = grd.laea)
kriging_result1 = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = europe.laea)
Krig = kriging_result$krige_output
# take only the points falling in polygons
Krig = kriging_result$krige_output[!is.na(over(kriging_result$krige_output,as(europe.laea,"SpatialPolygons"))),]
Krig.fin = spTransform(Krig, my.transform)
Krig_df = as.data.frame(Krig.fin)
names(Krig_df) = c(  "APPT_pred","APPT_var","APPT_stdev", "longitude","latitude")
my.df = as.data.frame(my.sp)
#Make a dataframe of Kriging in which the poorly interpolated points are just white
the_mode = getmode(kriging_result$krige_output@data$var1.pred)
Krig.fin = kriging_result
Krig.fin$krige_output@data$var1.pred[which(Krig.fin$krige_output@data$var1.pred==the_mode)] = NA
####################################################################################
# Plot world map with data points
####################################################################################
xmin_plot = extent(my.sp)[1] -5
xmax_plot = extent(my.sp)[2] +5
ymin_plot = extent(my.sp)[3] -5
ymax_plot = extent(my.sp)[4] +5
pal <- wes_palette("Zissou1", 100, type = "continuous")
base_europe_df <-
ggplot() +
geom_raster(data = Krig_df,
aes(x = Krig_df$longitude,
y = Krig_df$latitude, fill = NULL
),
inherit.aes = T)
#lets just make a raster of the Krig_df
OTU5_point <-
base_europe_df +
geom_jitter(data = my.df,
aes(coords.x1, coords.x2, colour = log10(OTU5*100)),
width = .5, cex = 2) +
scale_colour_gradientn(colours = pal,
values = c(0, 0.1, 0.4, 1), name = "log10(RA(%))") +
scale_y_continuous(expand = c(0,0), limits = c(ymin_plot, ymax_plot)) +
scale_x_continuous(expand = c(0,0), limits = c(xmin_plot, xmax_plot)) +
theme_opts +
theme_pubs +
xlab(label = NULL) +
ylab(label = NULL)
krig_OTU5 <-
ggplot(data = my.df, aes(x=coords.x2, y=coords.x1)) +
geom_raster(data = Krig_df,
aes(x = Krig_df$longitude,
y = Krig_df$latitude,
fill = Krig_df$APPT_pred),
inherit.aes = T) +
scale_y_continuous(expand = c(0,0), limits = c(ymin_plot, ymax_plot)) +
scale_x_continuous(expand = c(0,0), limits = c(xmin_plot, xmax_plot)) +
scale_fill_distiller(palette = "Spectral",
labs(size="OTU5 RA(%)"),
breaks = seq(0,1,.05)) +
theme_opts +
theme_pubs  +
xlab(label = NULL) +
ylab(label = NULL)
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/kriging_OTU5.pdf", family = "ArialMT", useDingbats = F)
plot_grid(OTU5_point, krig_OTU5)
dev.off()
vgOK <- kriging_result$exp_var
vgOK$distance <- vgOK$dist/1000
fitted.variogram <- kriging_result$var_model
variogram.line <- variogramLine(fitted.variogram, max(vgOK$dist))
vg <- ggplot() +
geom_point(data = vgOK, aes(x = log10(dist/1000), y = gamma), cex = 3) +
geom_line(data = variogram.line, aes(x = log10(dist/1000), y = gamma, colour = "RED")) +
xlab("Distance between points (km)") +
ylab("Semivariance") +
theme_bw() +
theme(legend.position = "none")
plot(vgOK, fitted.variogram, xlab = "Meters")
vg + theme_pubs
vg <- ggplot() +
geom_point(data = vgOK, aes(x = (dist/1000), y = gamma), cex = 3) +
geom_line(data = variogram.line, aes(x = (dist/1000), y = gamma, colour = "RED")) +
xlab("Distance between points (km)") +
ylab("Semivariance") +
theme_bw() +
theme(legend.position = "none")
vg
vg <- ggplot() +
geom_point(data = vgOK, aes(x = (dist/1000), y = gamma), cex = 3) +
geom_line(data = variogram.line, aes(x = (dist/1000), y = gamma, colour = "RED")) +
xlab("Distance between points (km)") +
scale_x_log10() +
scale_y_log10() +
ylab("Semivariance") +
theme_bw() +
theme(legend.position = "none")
vg
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/OTU5_variogram.pdf", family = "ArialMT", useDingbats = F)
vg + theme_pubs
dev.off()
kriging_world()<-function(input_data, map, input_variable){
# ####################################################################################
# # Read in data and project data and europe to laea centered on europe
# ####################################################################################
# path = "/ebio"
# OTU5_tab = read.table(paste(path, "/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/all_runs/demult_python/OTU5_RA_table.txt", sep =""),
#                       sep="\t",
#                       header = T )
# OTU5_tab$OTU5 = as.numeric(as.character(OTU5_tab$OTU5))
#
# #First add some wiggle to the OTU5 points then reproject the points
# OTU5_tab$Longitude = OTU5_tab$Longitude + runif(n=length(OTU5_tab$Longitude), min=0, max=0.000001)
# OTU5_tab$Latitude = OTU5_tab$Latitude + runif(n=length(OTU5_tab$Latitude), min=0, max=0.000001)
#
# #Now make sure everything has the same projection
# coordinates(OTU5_tab) = c("Longitude", "Latitude")
# proj4string(OTU5_tab) = CRS(my.transform)
# my.sf = st_as_sf(x = OTU5_tab, coords = c("Longitude", "Latitude"), crs = my.transform)
# my.sp = as_Spatial(my.sf)
# my.sp = spTransform(my.sp, CRS(my.transform))
# my.df = data.frame(my.sp)
#
# # subset world map. Still need to remove canary islands and northern part of Norway
# europe = world[world$continent == "Europe" | world$continent == "Asia" ,]
# europe = as_Spatial(europe, )
# crs(europe) = my.transform
# europe.sf = st_as_sf(europe)
#
####################################################################################
# Smooth over the region with Kriging.
####################################################################################
#I'm going to use the function krige from gstat
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
#"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
laea <- "+init=epsg:3857"  #laea for europe
my.sp <- spTransform(input_data, CRS(my.transform))
#I need to create a grid of points I would like to predict the values for.
lon <- seq(extent(my.sp)[1] - 5, extent(my.sp)[2] + 5, length.out = 500)
lat <- seq(extent(my.sp)[3] -5, extent(my.sp)[4] + 5, length.out = 500)
grd <- expand.grid(lon = lon, lat = lat)
grd_sf  <-  st_as_sf(grd, coords = c("lon", "lat"), crs = my.transform, agr = "constant")
grd_sp <- as_Spatial(grd_sf)
crs(grd_sp) = my.transform
#automap seems a little faster
sp.laea <- spTransform(my.sp, CRS(laea))
europe.laea <-spTransform(europe, CRS(laea))
grd.laea <- spTransform(grd_sp, CRS(laea))
kriging_result = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = grd.laea)
#kriging_result1 = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = europe.laea)
# Krig = kriging_result$krige_output
#
# # take only the points falling in polygons
# Krig = kriging_result$krige_output[!is.na(over(kriging_result$krige_output,as(europe.laea,"SpatialPolygons"))),]
# Krig.fin = spTransform(Krig, my.transform)
# Krig_df = as.data.frame(Krig.fin)
# names(Krig_df) = c(  "APPT_pred","APPT_var","APPT_stdev", "longitude","latitude")
# my.df = as.data.frame(my.sp)
return(kriging_result)
}
kriging_world<-function(input_data, map, input_variable){
# ####################################################################################
# # Read in data and project data and europe to laea centered on europe
# ####################################################################################
# path = "/ebio"
# OTU5_tab = read.table(paste(path, "/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/all_runs/demult_python/OTU5_RA_table.txt", sep =""),
#                       sep="\t",
#                       header = T )
# OTU5_tab$OTU5 = as.numeric(as.character(OTU5_tab$OTU5))
#
# #First add some wiggle to the OTU5 points then reproject the points
# OTU5_tab$Longitude = OTU5_tab$Longitude + runif(n=length(OTU5_tab$Longitude), min=0, max=0.000001)
# OTU5_tab$Latitude = OTU5_tab$Latitude + runif(n=length(OTU5_tab$Latitude), min=0, max=0.000001)
#
# #Now make sure everything has the same projection
# coordinates(OTU5_tab) = c("Longitude", "Latitude")
# proj4string(OTU5_tab) = CRS(my.transform)
# my.sf = st_as_sf(x = OTU5_tab, coords = c("Longitude", "Latitude"), crs = my.transform)
# my.sp = as_Spatial(my.sf)
# my.sp = spTransform(my.sp, CRS(my.transform))
# my.df = data.frame(my.sp)
#
# # subset world map. Still need to remove canary islands and northern part of Norway
# europe = world[world$continent == "Europe" | world$continent == "Asia" ,]
# europe = as_Spatial(europe, )
# crs(europe) = my.transform
# europe.sf = st_as_sf(europe)
#
####################################################################################
# Smooth over the region with Kriging.
####################################################################################
#I'm going to use the function krige from gstat
my.transform <- "+proj=longlat +datum=WGS84 +no_defs"
#"+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
laea <- "+init=epsg:3857"  #laea for europe
my.sp <- spTransform(input_data, CRS(my.transform))
#I need to create a grid of points I would like to predict the values for.
lon <- seq(extent(my.sp)[1] - 5, extent(my.sp)[2] + 5, length.out = 500)
lat <- seq(extent(my.sp)[3] -5, extent(my.sp)[4] + 5, length.out = 500)
grd <- expand.grid(lon = lon, lat = lat)
grd_sf  <-  st_as_sf(grd, coords = c("lon", "lat"), crs = my.transform, agr = "constant")
grd_sp <- as_Spatial(grd_sf)
crs(grd_sp) = my.transform
#automap seems a little faster
sp.laea <- spTransform(my.sp, CRS(laea))
europe.laea <-spTransform(europe, CRS(laea))
grd.laea <- spTransform(grd_sp, CRS(laea))
kriging_result = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = grd.laea)
#kriging_result1 = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = europe.laea)
# Krig = kriging_result$krige_output
#
# # take only the points falling in polygons
# Krig = kriging_result$krige_output[!is.na(over(kriging_result$krige_output,as(europe.laea,"SpatialPolygons"))),]
# Krig.fin = spTransform(Krig, my.transform)
# Krig_df = as.data.frame(Krig.fin)
# names(Krig_df) = c(  "APPT_pred","APPT_var","APPT_stdev", "longitude","latitude")
# my.df = as.data.frame(my.sp)
return(kriging_result)
}
?expand.grid
base_europe_df
ggplot(data = my.df, aes(x=coords.x2, y=coords.x1)) +
geom_raster(data = Krig_df,
aes(x = Krig_df$longitude,
y = Krig_df$latitude,
fill = Krig_df$APPT_pred),
inherit.aes = T) +
scale_y_continuous(expand = c(0,0), limits = c(ymin_plot, ymax_plot)) +
scale_x_continuous(expand = c(0,0), limits = c(xmin_plot, xmax_plot)) +
scale_fill_distiller(palette = "Spectral",
labs(size="OTU5 RA(%)"),
breaks = seq(0,1,.05))
Krig = kriging_result$krige_output
plot(Krig)
# take only the points falling in polygons
Krig = kriging_result$krige_output[!is.na(over(kriging_result$krige_output,as(europe.laea,"SpatialPolygons"))),]
plot(Krig)
map
OTU5_tab
OTU5_tab = read.table(paste(path, "/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/all_runs/demult_python/OTU5_RA_table.txt", sep =""),
sep="\t",
header = T )
OTU5_tab$OTU5 = as.numeric(as.character(OTU5_tab$OTU5))
head(OTU5)
head(OTU5_tab)
#remove NA's and Capsella
OTU5_tab = OTU5_tab["PC" %ni% rownames(OTU5_tab),]
library(inrval)
#remove NA's and Capsella
OTU5_tab = OTU5_tab["PC" %ni% rownames(OTU5_tab),]
library(intrval)
#remove NA's and Capsella
OTU5_tab = OTU5_tab["PC" %ni% rownames(OTU5_tab),]
dim(OTU5_tab)
OTU5_tab
grepl("PC",OTU5_tab$OTU5)
grepl("PA",OTU5_tab$OTU5)
grepl("PC", rownames(OTU5_tab))
OTU5_tab[!grepl("PC", rownames(OTU5_tab)),]
#remove NA's and Capsella
OTU5_tab = OTU5_tab[!grepl("PC", rownames(OTU5_tab)),]
dim(OTU5_tab)
#First add some wiggle to the OTU5 points then reproject the points
OTU5_tab$Longitude = OTU5_tab$Longitude + runif(n=length(OTU5_tab$Longitude), min=0, max=0.000001)
OTU5_tab$Latitude = OTU5_tab$Latitude + runif(n=length(OTU5_tab$Latitude), min=0, max=0.000001)
#Now make sure everything has the same projection
coordinates(OTU5_tab) = c("Longitude", "Latitude")
proj4string(OTU5_tab) = CRS(my.transform)
my.sf = st_as_sf(x = OTU5_tab, coords = c("Longitude", "Latitude"), crs = my.transform)
my.sp = as_Spatial(my.sf)
my.sp = spTransform(my.sp, CRS(my.transform))
my.df = data.frame(my.sp)
# subset world map. Still need to remove canary islands and northern part of Norway
europe = world[world$continent == "Europe" | world$continent == "Asia" ,]
europe = as_Spatial(europe, )
crs(europe) = my.transform
europe.sf = st_as_sf(europe)
#I need to create a grid of points I would like to predict the values for.
lon <- seq(extent(my.sp)[1] - 5, extent(my.sp)[2] + 5, length.out = 500)
lat <- seq(extent(my.sp)[3] -5, extent(my.sp)[4] + 5, length.out = 500)
grd <- expand.grid(lon = lon, lat = lat)
grd_sf  <-  st_as_sf(grd, coords = c("lon", "lat"), crs = my.transform, agr = "constant")
grd_sp <- as_Spatial(grd_sf)
crs(grd_sp) = my.transform
#automap seems a little faster
sp.laea <- spTransform(my.sp, CRS(laea))
europe.laea <-spTransform(europe, CRS(laea))
grd.laea <- spTransform(grd_sp, CRS(laea))
kriging_result = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = grd.laea)
kriging_result1 = autoKrige(formula = OTU5~1, input_data = sp.laea, new_data = europe.laea)
Krig = kriging_result$krige_output
# take only the points falling in polygons. This is the step where we limit the infomration
Krig = kriging_result$krige_output[!is.na(over(kriging_result$krige_output,as(europe.laea,"SpatialPolygons"))),]
Krig.fin = spTransform(Krig, my.transform)
Krig_df = as.data.frame(Krig.fin)
names(Krig_df) = c(  "APPT_pred","APPT_var","APPT_stdev", "longitude","latitude")
names(Krig_df) = c(  "APPT_pred","APPT_var","APPT_stdev", "longitude","latitude")
my.df = as.data.frame(my.sp)
#Make a dataframe of Kriging in which the poorly interpolated points are just white
the_mode = getmode(kriging_result$krige_output@data$var1.pred)
Krig.fin = kriging_result
Krig.fin$krige_output@data$var1.pred[which(Krig.fin$krige_output@data$var1.pred==the_mode)] = NA
####################################################################################
# Plot world map with data points
####################################################################################
xmin_plot = extent(my.sp)[1] -5
xmax_plot = extent(my.sp)[2] +5
ymin_plot = extent(my.sp)[3] -5
ymax_plot = extent(my.sp)[4] +5
pal <- wes_palette("Zissou1", 100, type = "continuous")
base_europe_df <-
ggplot() +
geom_raster(data = Krig_df,
aes(x = Krig_df$longitude,
y = Krig_df$latitude, fill = NULL
),
inherit.aes = T)
#lets just make a raster of the Krig_df
OTU5_point <-
base_europe_df +
geom_jitter(data = my.df,
aes(coords.x1, coords.x2, colour = log10(OTU5*100)),
width = .5, cex = 2) +
scale_colour_gradientn(colours = pal,
values = c(0, 0.1, 0.4, 1), name = "log10(RA(%))") +
scale_y_continuous(expand = c(0,0), limits = c(ymin_plot, ymax_plot)) +
scale_x_continuous(expand = c(0,0), limits = c(xmin_plot, xmax_plot)) +
theme_opts +
theme_pubs +
xlab(label = NULL) +
ylab(label = NULL)
krig_OTU5 <-
ggplot(data = my.df, aes(x=coords.x2, y=coords.x1)) +
geom_raster(data = Krig_df,
aes(x = Krig_df$longitude,
y = Krig_df$latitude,
fill = Krig_df$APPT_pred),
inherit.aes = T) +
scale_y_continuous(expand = c(0,0), limits = c(ymin_plot, ymax_plot)) +
scale_x_continuous(expand = c(0,0), limits = c(xmin_plot, xmax_plot)) +
scale_fill_distiller(palette = "Spectral",
labs(size="OTU5 RA(%)"),
breaks = seq(0,1,.05)) +
theme_opts +
theme_pubs  +
xlab(label = NULL) +
ylab(label = NULL)
pdf("/ebio/abt6_projects9/pathodopsis_microbiomes/data/figures_misc/kriging_OTU5.pdf", family = "ArialMT", useDingbats = F)
plot_grid(OTU5_point, krig_OTU5)
dev.off()
dev.off()
plot_grid(OTU5_point, krig_OTU5)
Krig
OOTU5_tab
OTU5_point
OTU5_tab
OTU5_tab = read.table(paste(path, "/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/all_runs/demult_python/OTU5_RA_table.txt", sep =""),
sep="\t",
header = T )
OTU5_tab$OTU5
min(OTU5_tab$OTU5)
max(OTU5_tab$OTU5)
which(OTU5_tab$OTU5==0)
length(which(OTU5_tab$OTU5==0))
# Percentage of individuals that have OTU5:
length(which(OTU5_tab$OTU5==0))/length(OTU5_tab$OTU5)
# Percentage of individuals that have OTU5:
has_OTU5 = length(which(OTU5_tab$OTU5!=0))/length(OTU5_tab$OTU5)
has_OTU5
vgOK <- kriging_result$exp_var
vgOK$distance <- vgOK$dist/1000
fitted.variogram <- kriging_result$var_model
variogram.line <- variogramLine(fitted.variogram, max(vgOK$dist))
vg <- ggplot() +
geom_point(data = vgOK, aes(x = (dist/1000), y = gamma), cex = 3) +
geom_line(data = variogram.line, aes(x = (dist/1000), y = gamma, colour = "RED")) +
xlab("Distance between points (km)") +
scale_x_log10() +
scale_y_log10() +
ylab("Semivariance") +
theme_bw() +
theme(legend.position = "none")
plot(vgOK, fitted.variogram, xlab = "Meters")
vg + theme_pubs
#output_direc="/ebio/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S_soil_phyllo_fin/"
output_direc="/ebio/abt6_projects9/pathodopsis_microbiomes/data/processed_reads/16S/16S_all/"
seqtab.nochim = readRDS(paste(output_direc,"/seqtab_final.rds", sep="/"))
taxa=readRDS(paste(output_direc,"/tax_final.rds", sep="/"))
metadata=read.table("/ebio/abt6_projects9/pathodopsis_microbiomes/pathodopsis_git/data/Pathodopsis_site_metadata_20190808_CZ_course2.txt", header=T, sep="\t")
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
samples.out <- sapply(strsplit(rownames(seqtab.nochim),"_"), "[",1)
samples.out
rownames(seqtab.nochim)[1:26]
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
samples.out <- sapply(strsplit(rownames(seqtab.nochim),"_"), "[",1)
# keep the control names
samples.out[1:26]=rownames(seqtab.nochim)[1:26]
rownames(seqtab.nochim) = samples.out
metadata_keep=metadata[metadata$Plant_ID%in%samples.out,]
meta_unique = metadata_keep %>% distinct()
metadata_organized=merge(data.frame(samples.out), meta_unique, by.x="samples.out", by.y="Plant_ID", all.x=TRUE)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
samdf <- data.frame(Subject=metadata_organized$samples.out,
Latitude=metadata_organized$Latitude,
Longitude=metadata_organized$Longitude,
Altitude=metadata_organized$Altitude,
hpa=metadata_organized$HpA_plant,
TourID=metadata_organized$Tour_ID,
Clim=metadata_organized$ClimateZ)
seqtab.nochim = readRDS(paste(output_direc,"/seqtab_final.rds", sep="/"))
taxa=readRDS(paste(output_direc,"/tax_final.rds", sep="/"))
metadata=read.table("/ebio/abt6_projects9/pathodopsis_microbiomes/pathodopsis_git/data/Pathodopsis_site_metadata_20190808_CZ_course2.txt", header=T, sep="\t")
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
samples.out <- sapply(strsplit(rownames(seqtab.nochim),"_"), "[",1)
metadata_keep=metadata[metadata$Plant_ID%in%samples.out,]
meta_unique = metadata_keep %>% distinct()
metadata_organized=merge(data.frame(samples.out), meta_unique, by.x="samples.out", by.y="Plant_ID", all.x=TRUE)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
samdf <- data.frame(Subject=metadata_organized$samples.out,
Latitude=metadata_organized$Latitude,
Longitude=metadata_organized$Longitude,
Altitude=metadata_organized$Altitude,
hpa=metadata_organized$HpA_plant,
TourID=metadata_organized$Tour_ID,
Clim=metadata_organized$ClimateZ)
rownames(samdf) <- samdf$Subject
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
controls <- match("control", rownames(seqtab.nochim))
controls
rownames(seqtab.nochim)
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
controls <- match("control", tolower(rownames(seqtab.nochim)))
controls
tolower(rownames(seqtab.nochim))
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
controls <- grep("control", rownames(seqtab.nochim),ignore.case=TRUE,value=TRUE))
#Data is read in, now we want to subset it properly to rename the controls (1:26) and give metadata
controls <- grep("control", rownames(seqtab.nochim),ignore.case=TRUE,value=TRUE)
controls
samples.out <- sapply(strsplit(rownames(seqtab.nochim),"_"), "[",1)
samples.out
control_index <- which(rownames(seqtab.nochim) %in% controls)
conrtol_index
control_index
# keep the control names in the name
samples.out[control_index]= controls
rownames(seqtab.nochim) = samples.out
metadata_keep=metadata[metadata$Plant_ID%in%samples.out,]
meta_unique = metadata_keep %>% distinct()
metadata_organized=merge(data.frame(samples.out), meta_unique, by.x="samples.out", by.y="Plant_ID", all.x=TRUE)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
samdf <- data.frame(Subject=metadata_organized$samples.out,
Latitude=metadata_organized$Latitude,
Longitude=metadata_organized$Longitude,
Altitude=metadata_organized$Altitude,
hpa=metadata_organized$HpA_plant,
TourID=metadata_organized$Tour_ID,
Clim=metadata_organized$ClimateZ)
rownames(samdf) <- samdf$Subject
sample_names(seqtab.nochim)=samples.out
#Now let's may the otu_table
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
library(phyloseq)
install.packages('ade4')
library(phyloseq)
install.packages("ape")
library(phyloseq)
library(phyloseq)
install.packages("phyloseq")
remove.packages("ape")
library(phyloseq)
library(ape)
library(ape)
library(ape)
library(ape)
library(ape)
library(phyloseq)
install.packages('ape')
library(ape)
library(ape)
install.packages("ape")
library(ape)
